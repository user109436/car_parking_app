require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/parking_spots", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # ParkingSpot. As you add validations to ParkingSpot, be sure to
  # adjust the attributes here as well.
  let(:parking_location_attributes){
    {
      street:'Parking Address',
      status:'active'
    }
  }

  let(:parking_location){ParkingLocation.create! parking_location_attributes }
  let(:valid_attributes) {
    {
      parking_location_id:parking_location.id,
      name:'000-level-1',
      status:'occupied',
      max_distance:52.2
    }
  }

  let(:invalid_attributes) {
    {
      parking_location_id:0,
      name:1,
      status:'invalid',
      max_distance:'test'
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      ParkingSpot.create! valid_attributes
      get parking_spots_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      parking_spot = ParkingSpot.create! valid_attributes
      get parking_spot_url(parking_spot)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_parking_spot_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      parking_spot = ParkingSpot.create! valid_attributes
      get edit_parking_spot_url(parking_spot)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new ParkingSpot" do
        expect {
          post parking_spots_url, params: { parking_spot: valid_attributes }
        }.to change(ParkingSpot, :count).by(1)
      end

      it "redirects to the created parking_spot" do
        post parking_spots_url, params: { parking_spot: valid_attributes }
        expect(response).to redirect_to(parking_spot_url(ParkingSpot.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new ParkingSpot and Raise Argument Error" do
        expect {
          post parking_spots_url, params: { parking_spot: invalid_attributes }
        }.to raise_error(ArgumentError, "#{invalid_attributes[:status]} is not a valid status")
        expect(ParkingSpot.count).to eq(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post parking_spots_url, params: { parking_spot: invalid_attributes }
        expect(response).to 
        (:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested parking_spot" do
        parking_spot = ParkingSpot.create! valid_attributes
        patch parking_spot_url(parking_spot), params: { parking_spot: new_attributes }
        parking_spot.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the parking_spot" do
        parking_spot = ParkingSpot.create! valid_attributes
        patch parking_spot_url(parking_spot), params: { parking_spot: new_attributes }
        parking_spot.reload
        expect(response).to redirect_to(parking_spot_url(parking_spot))
      end
    end

    context "with invalid parameters" do
    
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        parking_spot = ParkingSpot.create! valid_attributes
        patch parking_spot_url(parking_spot), params: { parking_spot: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested parking_spot" do
      parking_spot = ParkingSpot.create! valid_attributes
      expect {
        delete parking_spot_url(parking_spot)
      }.to change(ParkingSpot, :count).by(-1)
    end

    it "redirects to the parking_spots list" do
      parking_spot = ParkingSpot.create! valid_attributes
      delete parking_spot_url(parking_spot)
      expect(response).to redirect_to(parking_spots_url)
    end
  end
end
