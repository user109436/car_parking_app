require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/ultrasonic_readings", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # UltrasonicReading. As you add validations to UltrasonicReading, be sure to
  # adjust the attributes here as well.
  let(:parking_location_attribute){
    {
      street:"Test Street",
      status:"active"
    }
  }
  let(:parking_location){ParkingLocation.create! parking_location_attribute}
  let(:parking_spot_attribute){
    {
      name:"Test",
      status:"vacant",
      max_distance:50.0,
      parking_location_id:parking_location.id
    }
  }
  let(:parking_spot){ ParkingSpot.create! parking_spot_attribute}
  let(:valid_attributes) {
    {
      parking_spot_id:parking_spot.id,
      reading: 45
    }
  }

  let(:invalid_attributes) {
    {
      parking_spot_id:-1,
      reading:-1
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      UltrasonicReading.create! valid_attributes
      get ultrasonic_readings_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      ultrasonic_reading = UltrasonicReading.create! valid_attributes
      get ultrasonic_reading_url(ultrasonic_reading)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_ultrasonic_reading_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      ultrasonic_reading = UltrasonicReading.create! valid_attributes
      get edit_ultrasonic_reading_url(ultrasonic_reading)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new UltrasonicReading" do
        expect {
          post ultrasonic_readings_url, params: { ultrasonic_reading: valid_attributes }
        }.to change(UltrasonicReading, :count).by(1)
      end

      it "redirects to the created ultrasonic_reading" do
        post ultrasonic_readings_url, params: { ultrasonic_reading: valid_attributes }
        expect(response).to redirect_to(ultrasonic_reading_url(UltrasonicReading.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new UltrasonicReading" do
        expect {
          post ultrasonic_readings_url, params: { ultrasonic_reading: invalid_attributes }
        }.to change(UltrasonicReading, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post ultrasonic_readings_url, params: { ultrasonic_reading: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
         {
          parking_spot_id:parking_spot.id,
          reading: 20
        }
      }

      it "updates the requested ultrasonic_reading" do
        ultrasonic_reading = UltrasonicReading.create! valid_attributes
        patch ultrasonic_reading_url(ultrasonic_reading), params: { ultrasonic_reading: new_attributes }
        ultrasonic_reading.reload
        expect(ultrasonic_reading.parking_spot_id).to eq(new_attributes[:parking_spot_id])
        expect(ultrasonic_reading.reading).to eq(new_attributes[:reading])
      end

      it "redirects to the ultrasonic_reading" do
        ultrasonic_reading = UltrasonicReading.create! valid_attributes
        patch ultrasonic_reading_url(ultrasonic_reading), params: { ultrasonic_reading: new_attributes }
        ultrasonic_reading.reload
        expect(response).to redirect_to(ultrasonic_reading_url(ultrasonic_reading))
      end
    end

    context "with invalid parameters" do
    
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        ultrasonic_reading = UltrasonicReading.create! valid_attributes
        patch ultrasonic_reading_url(ultrasonic_reading), params: { ultrasonic_reading: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested ultrasonic_reading" do
      ultrasonic_reading = UltrasonicReading.create! valid_attributes
      expect {
        delete ultrasonic_reading_url(ultrasonic_reading)
      }.to change(UltrasonicReading, :count).by(-1)
    end

    it "redirects to the ultrasonic_readings list" do
      ultrasonic_reading = UltrasonicReading.create! valid_attributes
      delete ultrasonic_reading_url(ultrasonic_reading)
      expect(response).to redirect_to(ultrasonic_readings_url)
    end
  end
end
