require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/parking_locations", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # ParkingLocation. As you add validations to ParkingLocation, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      street:"Test Address",
      status:'active'
    }
  }

  let(:invalid_attributes) {
    {
      street:1,
      status:'invalid'
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      ParkingLocation.create! valid_attributes
      get parking_locations_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      parking_location = ParkingLocation.create! valid_attributes
      get parking_location_url(parking_location)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_parking_location_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      parking_location = ParkingLocation.create! valid_attributes
      get edit_parking_location_url(parking_location)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new ParkingLocation" do
        expect {
          post parking_locations_url, params: { parking_location: valid_attributes }
        }.to change(ParkingLocation, :count).by(1)
      end

      it "redirects to the created parking_location" do
        post parking_locations_url, params: { parking_location: valid_attributes }
        expect(response).to redirect_to(parking_location_url(ParkingLocation.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new ParkingLocation" do 
        expect {
          post parking_locations_url, params: { parking_location: invalid_attributes }
        }.to raise_error(ArgumentError, "'#{invalid_attributes[:status]}' is not a valid status")

        expect{ParkingLocation.count}.not_to change{ParkingLocation.count}
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        expect{
          post parking_locations_url, params: { parking_location: invalid_attributes }
          expect(response).to have_http_status(:unprocessable_entity)
      }.to raise_error(ArgumentError, "'#{invalid_attributes[:status]}' is not a valid status")
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          street: 'New Address',
          status: 'inactive'
        }
      }

      it "updates the requested parking_location" do
        parking_location = ParkingLocation.create! valid_attributes
        patch parking_location_url(parking_location), params: { parking_location: new_attributes }
        parking_location.reload

        expect(parking_location.street).to eq(new_attributes[:street])
        expect(parking_location.status).to eq(new_attributes[:status])
      end

      it "redirects to the parking_location" do
        parking_location = ParkingLocation.create! valid_attributes
        patch parking_location_url(parking_location), params: { parking_location: new_attributes }
        parking_location.reload
        expect(response).to redirect_to(parking_location_url(parking_location))
      end
    end

    context "with invalid parameters" do
    
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        parking_location = ParkingLocation.create! valid_attributes
        expect{  
          patch parking_location_url(parking_location), params: { parking_location: invalid_attributes }
          expect(response).to have_http_status(:unprocessable_entity)
      }.to raise_error(ArgumentError, "'#{invalid_attributes[:status]}' is not a valid status")
      end
    
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested parking_location" do
      parking_location = ParkingLocation.create! valid_attributes
      expect {
        delete parking_location_url(parking_location)
      }.to change(ParkingLocation, :count).by(-1)
    end

    it "redirects to the parking_locations list" do
      parking_location = ParkingLocation.create! valid_attributes
      delete parking_location_url(parking_location)
      expect(response).to redirect_to(parking_locations_url)
    end
  end
end
